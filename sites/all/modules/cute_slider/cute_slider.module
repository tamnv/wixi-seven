<?php
/**
 * @file cute_slider.module
 * User: duynguyen
 * Date: 3/30/13
 * Time: 11:28 AM
 * To change this template use File | Settings | File Templates.
 */

  @include_once dirname(__FILE__) . '/includes/cute_slider.classes.inc';

/**
 * Implements hook_menu
 */
function cute_slider_menu() {
  $items = array();
  $path = drupal_get_path('module', 'cute_slider');

  $items['admin/structure/cute-slider'] = array(
    'title' => t('Cute Sliders'),
    'page callback' => 'cute_slider_overview',
    'access arguments' => array('Administer CuteSlider'),
    'file path' => $path . '/includes',
    'file' => 'cute_slider.admin.inc',
    'description' => 'Manage all cute sliders',
  );

  $items['admin/structure/cute-slider/manage'] = array(
    'title' => t('Manage'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );

  $items['admin/structure/cute-slider/export-import'] = array(
    'title' => t('Export & Import'),
    'description' => t('Export and Import CuteSlider from data in others site.'),
    'page callback' => 'drupal_get_form',
    'access callback' => 'user_access',
    'page arguments' => array('cute_slider_import_export_form'),
    'access arguments' => array('Super administer CuteSlider'),
    'file path' => $path . '/includes',
    'file' => 'cute_slider.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
  );

  $items['admin/structure/cute-slider/create'] = array(
    'title' => t('Create new CuteSlider'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cute_slider_configuration_form'),
    'access arguments' => array('Super administer CuteSlider'),
    'type' => MENU_LOCAL_ACTION,
    'file path' => $path . '/includes',
    'file' => 'cute_slider.admin.inc',
  );

  $items['admin/structure/cute-slider/%cute_slider_id'] = array(
    'description' => t('Configure existing cuteslider'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cute_slider_configuration_form', 3),
    'access arguments' => array('Administer CuteSlider'),
    'file path' => $path . '/includes',
    'file' => 'cute_slider.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/structure/cute-slider/%cute_slider_id/edit'] = array(
    'title' => 'Edit',
    'description' => t('Edit existing cuteslider'),
    'page callback' => 'drupal_get_form',
    'access callback' => 'user_access',
    'page arguments' => array('cute_slider_edit_form', 3),
    'access arguments' => array('Administer CuteSlider'),
    'file path' => $path . '/includes',
    'file' => 'cute_slider.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
  );

  $items['admin/structure/cute-slider/%cute_slider_id/configure'] = array(
    'title' => t('Configure'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );

  $items['admin/structure/cute-slider/delete/%cute_slider_id'] = array(
    'title' => t('Delete'),
    'description' => t('Delete existing cuteslider.'),
    'page callback' => 'drupal_get_form',
    'access callback' => 'user_access',
    'page arguments' => array('cute_slider_delete_form', 4),
    'access arguments' => array('Super administer CuteSlider'),
    'file path' => $path . '/includes',
    'file' => 'cute_slider.admin.inc',
    'type' => MENU_CALLBACK,
  );

  $items['admin/structure/cute-slider/clone/%cute_slider_id'] = array(
    'description' => t('Clone existing cuteslider.'),
    'page callback' => 'cute_slider_clone_slider',
    'access callback' => 'user_access',
    'page arguments' => array(4),
    'access arguments' => array('Super administer CuteSlider'),
    'file path' => $path . '/includes',
    'file' => 'cute_slider.admin.inc',
    'type' => MENU_CALLBACK,
  );

  $items['admin/structure/cute-slider/transition'] = array(
    'description' => t('Get transition effect view.'),
    'page callback' => 'cute_slider_transition_view',
    'access callback' => 'user_access',
    'page arguments' => array(4),
    'access arguments' => array('Administer CuteSlider'),
    'file path' => $path . '/includes',
    'file' => 'cute_slider.admin.inc',
    'type' => MENU_CALLBACK,
  );

  $items['admin/structure/cute-slider/get-background-image'] = array(
    'page callback' => 'cute_slider_get_background',
    'access arguments' => array('Administer CuteSlider'),
    'file path' => $path . '/includes',
    'file' => 'cute_slider.admin.inc',
    'type' => MENU_CALLBACK,
  );

  $items['admin/structure/cute-slider/slide/delete'] = array(
    'page callback' => 'cute_slider_delete_slide',
    'access arguments' => array('Administer CuteSlider'),
    'file path' => $path . '/includes',
    'file' => 'cute_slider.admin.inc',
    'type' => MENU_CALLBACK,
  );

  $items['admin/structure/cute-slider/export-data'] = array(
    'page callback' => 'cute_slider_export_data',
    'access arguments' => array('Super administer CuteSlider'),
    'file path' => $path . '/includes',
    'file' => 'cute_slider.admin.inc',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_load for cute_slider_id wildcard
 */
function cute_slider_id_load($slid) {
    return CuteSlider::get_by_id($slid);
}

/**
 * Implements hook_permission()
 */
function cute_slider_permission() {
  $permissions = array();

  $permissions['Super administer CuteSlider'] = array(
    'title' => t('Super administrator CuteSlider'),
    'description' => t('Allow to create and delete CuteSlider.'),
  );

  $permissions['Administer CuteSlider'] = array(
    'title' => t('Administrator CuteSlider'),
    'description' => t('Allow configure and edit existing CuteSliders.'),
  );

  return $permissions;
}

  /**
 * Implements hook_theme()
 */
function cute_slider_theme() {
  $themes = array();
  $path = drupal_get_path('module', 'cute_slider');

  $themes['cute_slider_info'] = array(
    'variables' => array('title' => NULL, 'description' => NULL),
  );

  $themes['cute_slider_edit'] = array(
    'template' => 'cute_edit_form',
    'path' => $path . '/templates/admin',
    'file' => 'theme.admin.inc',
  );

  $themes['cute_slider_admin_layer'] = array(
    'template' => 'admin_layer',
    'path' => $path . '/templates/admin',
    'file' => 'theme.admin.inc',
  );

  $themes['cute_slider_admin_slides'] = array(
    'template' => 'admin_slides',
    'path' => $path . '/templates/admin',
    'file' => 'theme.admin.inc',
  );

  $themes['cute_slider_admin_slide'] = array(
    'variables' => array('slide' => NULL),
    'template' => 'cute_admin_slide',
    'path' => $path . '/templates/admin',
    'file' => 'theme.admin.inc',
  );

  $themes['slide_setting'] = array(
    'template' => 'slide_setting',
    'path' => $path . '/templates/admin',
  );

  $themes['cute_transition_view'] = array(
    'template' => 'cute_transition_library',
    'path' => $path . '/templates/admin',
  );

  $themes['cute_slider_front'] = array(
    'template' => 'cute_slider',
    'path' => $path . '/templates/front',
    'file' => 'theme.front.inc',
  );

  $themes['cute_slide_content'] = array(
    'template' => 'cute_slide_content',
    'path' => $path . '/templates/front',
  );

  return $themes;
}


/**
 * cute_slider_info theme function
 */
function theme_cute_slider_info($variables) {
  $output = check_plain($variables['title']);
  $output .= '<div class="despcription">' . filter_xss_admin($variables['description']) . '</div>';

  return $output;
}

/**
 * Get templates list
 */
function _template_list() {
  $templates = array();
  $template_path = drupal_get_path('module', 'cute_slider') . '/skins';
  $libraries_path = 'sites/all/libraries/megadrupal/cute_slider';
  $files_exclude = array('.svn', 'CVS', '.git');

  # Get default templates
  $handle = opendir($template_path);
  if ($handle) {
    while (($file = readdir($handle)) !== FALSE) {
      if ($file == '..' || $file == '.' || in_array($file, $files_exclude))
        continue;

      $templates[$file] = $template_path . '/' . $file;
    }

    closedir($handle);
    ksort($templates);
  }

  # Get custom templates
  if (is_dir($libraries_path)) {
    $handle = opendir($libraries_path);
    if ($handle) {
      while (($file = readdir($handle)) !== FALSE) {
        if ($file == '..' || $file == '.')
          continue;

        $templates[$file] = $libraries_path . '/' . $file;
      }

      closedir($handle);
    }
  }

  return $templates;
}

/**
 * Implements hook_page_build()
 */
function cute_slider_page_build(&$page) {
  $current_path = current_path();
  if (strpos($current_path, 'cute-slider') !== FALSE && strpos($current_path, 'edit') !== FALSE) {
    $page['content']['slide_setting'] = array(
      '#markup' => theme('slide_setting'),
    );
  }
}

/**
 * Implements hook_block_info()
 */
function cute_slider_block_info() {
  $blocks = array();

  # Get all CuteSlider is created
  $sliders = CuteSlider::get_all();
  foreach ($sliders as $slider) {
    $blocks[$slider->slid]['info'] = t("CuteSlider: {$slider->title}");
    $blocks[$slider->slid]['cache'] = DRUPAL_NO_CACHE;
  }

  return $blocks;
}

/**
 * Implements hook_block_views()
 */
function cute_slider_block_view($delta='') {
  $path = drupal_get_path('module', 'cute_slider');
  $block = array('subject' => t(''), 'content' => '');

  # Get slider data
  $slider = CuteSlider::get_by_id($delta);
  if (!$slider)
    return $block;

  # Generate block content
  $block['content'] = theme('cute_slider_front', array('slider' => $slider));

  # Add js and css needed
  $base_path = base_path();
  drupal_add_js("var cuteSliderPath='{$base_path}{$path}';", 'inline');
  drupal_add_js($path . '/js/modernizr.js', array('weight' => 1));
  drupal_add_js($path . '/js/cute/cute.slider.js', array('weight' => 2));
  drupal_add_js($path . '/js/cute/cute.transitions.all.js', array('weight' => 3));
  drupal_add_js($path . '/js/respond.min.js', array('weight' => 4));

	drupal_add_css($path . '/css/cute-slider.base.css', array('weight' => 1));
  $templates = variable_get('cute_slider_templates');
  $templates_path = $templates[$slider->settings['template']];
  drupal_add_css("{$templates_path}/cute-{$slider->settings['template']}.css", array('weight' => 2));
  drupal_add_css("public://cute-slider-{$slider->machine_name}-custom.css", array('weight' => 3));
  cute_slider_load_custom_style_css($slider->machine_name);
  if ($slider->settings['google_font'] != '') {
    drupal_add_css($slider->settings['google_font'], array('type' => 'external'));
  }

  # Add control slider js
  $control_js = "if (jQuery('#cute-slider-{$slider->slid}').length) {
	var slider_{$slider->slid} = new Cute.Slider();
  slider_{$slider->slid}.setup('cute-slider-{$slider->slid}', 'cute-slider-{$slider->slid}-wrapper');";

  # Check to setup gallery mode
  if ($slider->settings['gallery_mode']) {
    drupal_add_js($path . '/js/cute/cute.gallery.plugin.js', array('weight' => 5));
    $control_js .= "var gallery_{$slider->slid} = new Cute.CuteGallery();
    gallery_{$slider->slid}.setup(slider_{$slider->slid});
		jQuery('#cute-slider-{$slider->slid}').mdCuteGalleryThumb();";
  }

  if ($slider->settings['responsive']) {
		drupal_add_js($path . '/js/md-cute.js', array('weight' => 5));
    $control_js .= "jQuery('#cute-slider-{$slider->slid}').mdCuteResponsive();";
  }
	
	if ($slider->settings['show_thumbnail_bar']) {
		drupal_add_js($path . '/js/md-cute.js', array('weight' => 5));
		$control_js .= "jQuery('#cute-slider-{$slider->slid}').mdCuteThumbList();";
	}
	
  if (!$slider->settings['auto'])
    $control_js .= "slider_{$slider->slid}.pause();
    ";

  $callbacks = array('change_start', 'change_end', 'wating', 'change_next_slide', 'wating_for_next');
  foreach ($callbacks as $callback) {
    if ($slider->settings[$callback] != CuteSlider::get_default_settings($callback)) {
      $callback_event = strtoupper($callback);
      $control_js .= "this.cute_slider_{$slider->slid}_{$callback} = {$slider->settings[$callback]};
      slider_{$slider->slid}.api.addEventListener(Cute.SliderEvent.{$callback_event}, this.cute_slider_{$slider->slid}_{$callback}, this);
      ";
    }
  }
	
	$control_js .= "}";
	
  drupal_add_js($control_js, array('type' => 'inline', 'scope' => 'footer'));

  return $block;
}

/**
 * Implements hook_contextual_links_view_alter()
 */
function cute_slider_contextual_links_view_alter(&$element, &$items) {
  if (isset($element['#element']['#block']) && $element['#element']['#block']->module == "cute_slider") {
    $element['#links']['edit-cute-slider'] = array(
      'title' => 'Edit CuteSlider',
      'href' => url('admin/structure/cute-slider/' . $element['#element']['#block']->delta . '/edit', array('absolute' => TRUE, 'query' => drupal_get_destination())),
      'weight' => -100,
    );

    $element['#links']['config-cute-slider'] = array(
      'title' => 'Configure CuteSlider',
      'href' => url('admin/structure/cute-slider/' . $element['#element']['#block']->delta, array('absolute' => TRUE, 'query' => drupal_get_destination())),
    );
  }
}

/**
 * Load custom css for slider
 */
function cute_slider_load_custom_style_css($slid) {
  if (file_exists("sites/all/libraries/megadrupal/cute_slider/cute-slider-custom-class-{$slid}.css")) {
    $file_path = "sites/all/libraries/megadrupal/cute_slider/cute-slider-custom-class-{$slid}.css";
    drupal_add_css($file_path);
  }

  else if (file_exists("sites/all/libraries/megadrupal/cute_slider/cute-slider-custom-class.css")) {
    $file_path = "sites/all/libraries/megadrupal/cute_slider/cute-slider-custom-class.css";
    drupal_add_css($file_path);
  }
  else {
    $file_path = drupal_get_path('module', 'cute_slider') . "/css/cute-slider-custom-class.css";
    drupal_add_css($file_path);
  }

  return $file_path;
}